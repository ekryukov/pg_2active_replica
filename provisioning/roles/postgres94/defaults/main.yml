---
# RHEL/CentOS only. Set a repository to use for PostgreSQL installation.
postgresql_enablerepo: ""

# Set postgresql state when configuration changes are made. Recommended values:
# `restarted` or `reloaded`
postgresql_restarted_state: "restarted"

postgresql_python_library: python-psycopg2
postgresql_user: postgres
postgresql_group: postgres

postgresql_unix_socket_directories:
  - /var/run/postgresql

postgresql_service_state: started
postgresql_service_enabled: true

# Global configuration options that will be set in postgresql.conf.
postgresql_global_config_options:
  - option: unix_socket_directories
    value: '{{ postgresql_unix_socket_directories | join(",") }}'
  - option: listen_addresses
    value: '*'
  - option: shared_preload_libraries
    value: 'bdr'
  - option: wal_level
    value: logical
  - option: max_wal_senders
    value: 10
  - option: max_replication_slots
    value: 10
  - option: track_commit_timestamp
    value: on
  - option: shared_buffers
    value: 1GB
  - option: effective_cache_size
    value: 3GB
  - option: maintenance_work_mem
    value: 256MB
  - option: checkpoint_completion_target
    value: 0.9
  - option: wal_buffers
    value: 16MB
  - option: default_statistics_target
    value: 100
  - option: random_page_cost
    value: 4
  - option: effective_io_concurrency
    value: 2
  - option: work_mem
    value: 104857kB
  - option: checkpoint_segments
    value: 64



# Host based authentication (hba) entries to be added to the pg_hba.conf. This
# variable's defaults reflect the defaults that come with a fresh installation.
postgresql_hba_entries:
  - {type: local, database: all, user: postgres, auth_method: peer}
  - {type: local, database: all, user: all, auth_method: trust}
  - {type: host, database: all, user: all, address: 'localhost', auth_method: trust}
  - {type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: trust}
  - {type: host, database: all, user: all, address: '10.8.110.0/24', auth_method: trust}
  - {type: host, database: replication, user: postgres, address: '10.8.110.0/24', auth_method: trust}
  - {type: host, database: svip_db, user: svip, address: '10.0.1.0/24', auth_method: md5}
  - {type: host, database: all, user: all, address: '::1/128', auth_method: md5}

# Debian only. Used to generate the locales used by PostgreSQL databases.
postgresql_locales:
  - 'en_US.UTF-8'

# Databases to ensure exist.
postgresql_databases:
  - name: svip_db
#   lc_collate: # defaults to 'en_US.UTF-8'
#   lc_ctype: # defaults to 'en_US.UTF-8'
#   encoding: # defaults to 'UTF-8'
#   template: # defaults to 'template0'
#   login_host: # defaults to 'localhost'
#   login_password: svip1
#   login_user: svip
#   login_unix_socket: # defaults to 1st of postgresql_unix_socket_directories
#   port: # defaults to not set
#   owner: # defaults to postgresql_user

# Users to ensure exist.
postgresql_users:
  - name: svip
    password: svip1
    #   encrypted: # defaults to not set
    #   priv: # defaults to not set
    #   role_attr_flags: # defaults to not set
    db: svip_db
#   login_host: # defaults to 'localhost'
#   login_password: # defaults to not set
#   login_user: # defaults to '{{ postgresql_user }}'
#   login_unix_socket: # defaults to 1st of postgresql_unix_socket_directories
#   port: # defaults to not set
#   state: # defaults to 'present'

init_main_bdr: "SELECT bdr.bdr_group_create(local_node_name := 'main', node_external_dsn := 'port=5432 dbname={{ postgresql_databases[0].name }} host={{ ansible_host }}');"
init_node_bdr: "SELECT bdr.bdr_group_join(local_node_name := 'node1', node_external_dsn := 'port=5432 dbname={{ postgresql_databases[0].name }} host={{ hostvars.main.ansible_ssh_host }}', join_using_dsn := 'port=5432 dbname={{ postgresql_databases[0].name }} host={{ ansible_ssh_host }}');"

bdr_init:
  - create extension btree_gist;
  - create extension bdr;
